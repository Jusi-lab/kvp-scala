Option
Option — контейнер, который может содержать значение (Some(x)) или быть пустым (None).

 Основные методы Option
- Option(1), Some(1), None — создание объектов Option.
- isEmpty, isDefined, nonEmpty — проверка наличия значения.
- contains(x) — проверяет, содержит ли Option значение x.
- filter(predicate), filterNot(predicate) — фильтрация.
- exists(predicate), forall(predicate) — проверка условий.
- get, getOrElse(defaultValue), getOrElse(throw new Exception(...)) — извлечение значения.

код:
val o1 = Option(1) // Some(1)
val o2 = Option.empty[Int] // None
val o5 = Option(null) // None
val i1 = o1.getOrElse(2) // 1, если Some(1), иначе 2

orElse
Позволяет вернуть первое непустое значение из цепочки Option.

код:
val x: String =
  Option(loadById(1))
    .orElse(Option(loadByContractNumber("321")))
    .getOrElse("not found")


Обработка Option с помощью match.

код:
val y = Option(1) match {
  case None => "Пусто"
  case Some(value) if value > 2 => "Больше 2"
  case Some(v) => s"Значение: $v"
}


flatten
Если у нас Option[Option[T]], flatten превращает его в Option[T].

код:
val o = Option(Option(1))
val x = o.flatten // Some(1)


 map
Изменяет значение внутри Option.

код:
val o = Option(1)
val o1 = o.map(_ + 1) // Some(2)

flatMap
Как map, но работает с Option[T], чтобы избежать Option[Option[T]].

код:
val o = Option(Option(1))
val x = o.flatMap(o => o.map(_ + 1))


foreach
Выполняет действие для значения внутри Option, если оно есть.

код:
Option(1).foreach(println) // Выведет 1


 Option.when
Создает Some(value), если условие true, иначе None.

код:
val o = Option.when(1 == 2)("123") // None
val o1 = Option.when(1 != 2)("123") // Some("123")


Iterable-методы
Методы Option, работающие с Iterable.

код:
val o1 = Option(1)
val i1 = o1.head // 1
val o2 = o1.headOption // Some(1)
val i2 = o1.last // 1
val o3 = o1.lastOption // Some(1)
val o4 = o1.find(_ > 1) // None
val i3 = o1.sum // 1
val i4 = o1.product // 1


fold
Позволяет задать значение по умолчанию, если Option пуст.

код:
val o1 = Option(1)
val o7: Int = o1.fold(1)(_ + 1) // Если None -> 1, если Some(1) -> 2

withFilter
Описание:
Метод withFilter используется для фильтрации значений внутри контейнера
(например, в for-comprehension). Он позволяет пропускать значения, которые не удовлетворяют условию.

Пример:

val name2: Option[String] = for {
  ClassWithOption(_, Some(Urza(Some(name)))) <- cwo if name.nonEmpty
} yield name
if name.nonEmpty пропускает только те значения, где name не пустой.

Аналог без for-comprehension:
cwo.withFilter {
  case ClassWithOption(_, Some(Urza(Some(name)))) => name.nonEmpty
  case _ => false
}.map {
  case ClassWithOption(_, Some(Urza(Some(name)))) => name
}

isEmpty
Описание:
Метод isEmpty проверяет, является ли контейнер пустым (например, Option — None, List — пустой список).
Пример:
val isEmpty: Boolean = cwo.isEmpty
Возвращает true, если cwo равно None, и false, если cwo содержит значение.

Try
Описание:
Try — это контейнер для обработки операций, которые могут завершиться с исключением. Он возвращает либо Success с результатом, либо Failure с исключением.
Пример:
val maybeThrowException: Try[Int] = Try { 1 / 0 }
Если операция завершится успешно, вернется Success(value).
Если произойдет исключение, вернется Failure(exception).
Методы Try:
isSuccess — проверяет, успешен ли результат.
isFailure — проверяет, завершился ли результат с исключением.
getOrElse — возвращает значение или значение по умолчанию в случае исключения.
recover — обрабатывает исключение и возвращает новый Try.

7. Either
Описание:
Either — это контейнер, который может содержать одно из двух значений: Left (обычно используется для ошибок) или Right (обычно используется для успешного результата).
Пример:
def getInfoFromUrl(url: String): Either[String, Int] = {
  if (url.isEmpty) Left("Empty url!")
  else Right(url.length)
}
Если url пустой, возвращается Left("Empty url!").
Иначе возвращается Right(url.length).
Методы Either:
map — применяет функцию к значению Right.
flatMap — применяет функцию, возвращающую Either, к значению Right.
left и right — позволяют работать с Left и Right отдельно.

recover
Описание:
Метод recover позволяет обработать исключение в Try и вернуть новый результат.
Пример:
val recoverFail: Try[Double] = maybeThrowException.recover {
  case _: ArithmeticException => 4d
}
Если исключение ArithmeticException, вернется Success(4d).

toOption
Описание:
Метод toOption преобразует контейнер (Try, Either) в Option. Успешные значения становятся Some, а ошибки — None.
Пример:
val x: Option[Int] = maybeThrowException.toOption
Если maybeThrowException равно Success(value), вернется Some(value).
Если Failure, вернется None.

mkString
Описание:
Метод mkString преобразует коллекцию в строку, объединяя элементы с помощью разделителя.
Пример:
val resultStr: String = resultInfos.mkString(",\n")
Преобразует список resultInfos в строку, где элементы разделены ,\n.

LEC 7

1. Enumeration (простое перечисление)
object Colors extends Enumeration {
  type Color = Value
  val Red, Green, Blue = Value

  def isRed(c: Colors.Color): Boolean = c == Colors.Red
}
Enumeration — это базовый способ создания перечислений в Scala.
type Color = Value — создает псевдоним для типа Value, который представляет собой элемент перечисления.
val Red, Green, Blue = Value — создает три элемента перечисления: Red, Green, Blue.
isRed — метод, который проверяет, является ли переданный элемент перечисления Red.
Colors.values — возвращает все элементы перечисления.
withName("Red") — возвращает элемент перечисления по его имени (выбрасывает исключение, если элемент не найден).

2. Enumeration с переопределением параметров
object Colors extends Enumeration {
  type Color = Value
  val Red = Value(10, "Red color")
  val Green = Value(1)
  val Blue = Value("Blue color")
}
Как работает
Value может принимать параметры: id (числовой идентификатор) и name (строковое имя).
Например, Red имеет id = 10 и имя "Red color".
Это позволяет гибко настраивать перечисления, задавая собственные идентификаторы и имена.

3. Enumeration с пользовательскими параметрами
object ColorWP extends Enumeration {
  protected case class RGBColor(i: Int, r: Int, g: Int, b: Int) extends super.Val(i) {
    def printRGV(): Unit = println(s"${this.getClass.getSimpleName} rgb is $r $g $b")
  }

  type Color = RGBColor
  val Red = RGBColor(1, 255, 0, 0)
  val Green = RGBColor(2, 0, 255, 0)
  val Blue = RGBColor(3, 0, 0, 255)
}
Как работает
Создается пользовательский класс RGBColor, который расширяет Val и добавляет дополнительные параметры (например, RGB-значения).
Каждый элемент перечисления (Red, Green, Blue) создается как экземпляр RGBColor.
Метод printRGV позволяет выводить RGB-значения для каждого элемента.

4. Sealed Trait Enum
sealed trait ColorST {
  val r: Int = 0
  val g: Int = 0
  val b: Int = 0
  def printRGBValue(): Unit = println(s"${this.getClass.getSimpleName} rgb is $r $g $b")
}

case class Red() extends ColorST {
  override val r: Int = 255
}

sealed trait — это трейт, который может быть расширен только в том же файле, что позволяет компилятору проверятьсопостав ления с образцом.
Каждый класс (Red, Green, Blue) расширяет трейт и переопределяет значения r, g, b.
Метод printRGBValue выводит RGB-значения для каждого цвета.
matchColor — функция, которая использует сопоставление с образцом для вывода RGB-значений.

5. Работа со списками (List)
val l1: List[Int] = List(1, 2, 3, 4)
Основные методы:
isEmpty / nonEmpty: Проверяет, пуст ли список.
head / headOption: Возвращает первый элемент списка (или Option).
tail Возвращает список без первого элемента.
init Возвращает список без последнего элемента.
map Применяет функцию к каждому элементу списка.
filter Фильтрует элементы списка по условию.
fold / foldLeft / foldRight Сворачивает список, применяя функцию к аккумулятору и каждому элементу.
groupBy Группирует элементы списка по ключу.
mkString Преобразует список в строку с разделителем.
sum / product Возвращает сумму или произведение элементов списка.
maxBy / minBy Возвращает элемент с максимальным или минимальным значением по заданному критерию.

6. Paterm match list

l1 match {
  case List(a, b, c, d) => println(a, b, c, d)
  case head :: tail => println(head); println(tail)
}
Как работает
Сопоставление с образцом позволяет разбить список на части (например, первый элемент и хвост).
head :: tail — разделяет список на первый элемент (head) и оставшуюся часть (tail).
List(a, b, c, d) — проверяет, что список содержит ровно 4 элемента.

7. Операции над списками
val intersect = l3.intersect(l4) // Пересечение списков
val diff1 = l3.diff(l4)         // Разность списков
val concat = l3.concat(l4)      // Конкатенация списков
Как работает:

intersect Возвращает общие элементы двух списков.
diff Возвращает элементы, которые есть в первом списке, но отсутствуют во втором.
concat Объединяет два списка в один.

8. Преобразование списков
l1.toSet  // Преобразует список в Set
l1.toArray // Преобразует список в массив


Lec8
Методы для работы с Set
Создание Set
Set(1, 2, 3) — создает новое множество с элементами 1, 2, 3. Множества автоматически удаляют дубликаты, поэтому Set(1, 2, 3, 3) будет равно Set(1, 2, 3).
Добавление элемента в Set
s1 + 5 — возвращает новое множество, в которое добавлен элемент 5.
Удаление элемента из Set
s1 - 3 — возвращает новое множество, из которого удален элемент 3.
Разность множеств
s1 -- s2 — возвращает новое множество, которое содержит элементы из s1, отсутствующие в s2.
Сравнение множеств
s1 == s2 — проверяет, равны ли множества s1 и s2. Множества считаются равными, если они содержат одинаковые элементы, независимо от порядка.
Методы для работы с Map
Создание Map
Map(1 -> "AAA", 2 -> "BBB") — создает новую карту с ключами 1 и 2 и соответствующими значениями "AAA" и "BBB". Если ключ повторяется (например, 2 -> "VVV"), то сохраняется последнее значение.
Получение ключей и значений
map1.keySet — возвращает ключь карты.
map1.values — возвращает значение.
Преобразование Map
map1.map { case (k, v) => (k + 1, v + "!!!") } — применяет функцию к каждой паре ключ-значение и возвращает новую карту с преобразованными ключами и значениями.
Получение значения по ключу
map1.get(key) — возвращает Option[V], который содержит значение, если ключ существует, или None, если ключ отсутствует.
map1(key) — возвращает значение по ключу, но выбрасывает исключение, если ключ отсутствует.
Добавление и удаление элементов
a + (2 -> "BBB") — возвращает с добавленной парой ключ-значение.
a - 1 — возвращает с удаленным ключом 1.
a -- List(1, 2) — возвращает новую карту с удаленными ключами из списка.
Обновление значения
a.updated(3, "CCC") — возвращает с обновленным значением для ключа 3.
Методы для работы с List
Создание List
List(1, 2, 3) — создает новый список с элементами 1, 2, 3.
Метод flatten
lWithOpt.flatten — преобразует список опций List(Option(1), None, Option(2)) в список значений List(1, 2), удаляя None.
Метод map
oWithL.map(_.flatten) — применяет функцию flatten к значению внутри Option, если оно существует.
Метод flatMap
lWithNulls.headOption.flatMap(x => Option(x)) — преобразует Option в другой Option, удаляя null.
Конкатенация списков
lWithNulls :+ 3 — добавляет элемент 3 в конец списка.
3 +: lWithNulls — добавляет элемент 3 в начало списка.
list ::: list — объединяет два списка.
list ++ list — аналогично :::, но работает для любых коллекций.
Метод foreach
map1.keySet.foreach(println) — применяет функцию println к каждому элементу коллекции.
Общие методы для коллекций
Метод map
Применяет функцию к каждому элементу коллекции и возвращает новую коллекцию с результатами.
Метод filter
 — возвращает коллекцию, содержащую только элементы, удовлетворяющие условию.
Метод size
Возвращает количество элементов в коллекции.
Метод mkString
Преобразует коллекцию в строку, объединяя элементы с указанным разделителем.

Вот самописный справочник методов, которые используются в приведённых примерах. Этот справочник поможет вам быстро вспомнить, как работает каждый метод, если вы забудете.


07.03.2025 SCALA
1. view (ленивая коллекция)
Метод view создаёт ленивую (отложенную) версию коллекции.
Преобразования (например, map, filter) не применяются сразу, а откладываются до момента,
когда результат действительно понадобится (например, при вызове toList, Foreach и т.д.).
Пример
  val x = list.view.map(_ + 1).map(_ + 1).filter(_ > 4).map(_ + 1).toList
  Здесь все преобразования (map, filter) выполняются только при вызове toList.
2. list.map
Применяет функцию к каждому элементу коллекции и возвращает новую коллекцию с результатами.
  list.map(_ + 1) // Прибавляет 1 к каждому элементу
3. list.filter
Возвращает новую коллекцию, содержащую только те элементы, которые удовлетворяют условию (предикату).
  list.filter(_ > 4) // Оставляет только элементы больше 4
4. toList
Преобразует коллекцию (в том числе ленивую) в список (List). Если коллекция ленивая, то все отложенные вычисления выполняются на этом этапе.
  list.view.map(_ + 1).toList // Вычисляет ленивые преобразования и возвращает список
5. prepended и appended (для неизменяемых коллекций)
prepended добавляет элемент в начало коллекции.
appended добавляет элемент в конец коллекции.
Оба метода возвращают новую коллекцию, не изменяя исходную.
val il1 = il.prepended(1) // Добавляет 1 в начало
val il2 = il.appended(1)  // Добавляет 1 в конец
6. addOne и prepend (для изменяемых коллекций)
addOne добавляет элемент в конец изменяемой коллекции.
  ml.addOne(1) // Добавляет 1 в конец
7. var и val с коллекциями
Описание:
 val создаёт неизменяемую ссылку на коллекцию.
 var позволяет переназначать ссылку на другую коллекцию.
  var lvar = List(1, 2, 3)
  lvar = lvar.map(_ + 1) // Можно переназначить
  val lval = List(1, 2, 3)
  // lval = lval.map(_ + 1) // Ошибка: нельзя переназначить val
  8. compose и andThen (композиция функций)
 compose создаёт новую функцию, которая сначала применяет вторую функцию, а затем первую.
 andThen создаёт новую функцию, которая сначала применяет первую функцию, а затем вторую.
  def comp = (addOne _).compose(prodTwo) // prodTwo, затем addOne
  def anThen = (addOne _).andThen(prodTwo) // addOne, затем prodTwo
9. PartialFunction (частичные функции)
Частичная функция определена только для некоторых входных значений.
Используется с `case` и может проверять, определена ли она для конкретного значения с помощью `isDefinedAt`.
  def squareRoot: PartialFunction[Double, Double] = {
    case x if x >= 0 => Math.sqrt(x)
  }
  if (squareRoot.isDefinedAt(x)) squareRoot(x)
10. collect
Применяет частичную функцию к каждому элементу коллекции и возвращает новую коллекцию только с теми элементами, для которых функция определена.
  List(-1d, 4d).collect(squareRoot) // Применяет squareRoot только к 4d
11. flatten
 "Уплощает" коллекцию коллекций в одну коллекцию.
  List(Option(1), Option(2), None).flatten // Преобразует в List(1, 2)
  12. orElse (для частичных функций)
Объединяет две частичные функции. Если первая функция не определена для входного значения, применяется вторая.
  def swapSign: PartialFunction[Int, Int] = positiveToNegative.orElse(negativeOrZeroToPos)
13. andThen (для частичных функций)
Применяет одну частичную функцию, а затем другую.
  def swapAndPrintIfPos: PartialFunction[Int, Unit] = swapSign.andThen(printPos)



1. Higher Order Functions (HOF)
 hof1(i: Int, f: Int => Int): Int
  Принимает целое число i и функцию f, которая принимает целое число и возвращает целое число. Возвращает результат применения функции f к числу i.
  hof1(2, quad) применит функцию quad к числу 2, вернув 4.
  quad(i: Int): Int
 Возвращает квадрат числа i.
 quad(3) вернет 9.

hof2(i: Int): Int => Int
Возвращает функцию, которая принимает целое число a и возвращает результат умножения i на a.
hof2(2) вернет функцию a => 2 * a. Если вызвать эту функцию с аргументом 3, результат будет 6.

2. Каррирование (Currying)
  sum(x: Int)(y: Int): Double
Принимает два целых числа `x` и `y` и возвращает результат деления `x` на `y` в виде `Double`.
sum(4)(2) вернет 2.0.
increment: Int => Double
Частично примененная функция sum(1)(_), которая принимает целое число и возвращает результат деления 1 на это число.
increment(2) вернет 0.5.
summF(f: Int => Int)(x: Int, y: Int): Int
Принимает функцию f и два целых числа x и y. Возвращает сумму результатов применения функции f к x и y.
summF(x => x * x)(2, 3) вернет 13 (так как 4 + 9 = 13).
justSum: (Int, Int) => Int
Частично примененная функция summF(identity)(_, _), которая просто складывает два числа.
justSum(2, 3) вернет 5.
justSum2: (Int, Int) => Int
Аналогично justSum, но явно использует функцию x => x.
justSum2(2, 3) вернет 5.
